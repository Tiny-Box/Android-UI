package tinybox.lib.util;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.Build;
import android.util.TypedValue;

import tinybox.lib.R;

/**
 * Created on 2015/5/24.
 */
public class ThemeUtil {
    private static TypedValue value;

    public static int dpToPx(Context context, int dp){
        // standard way about dptopx:
        return (int)(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics()) + 0.5f);
    }

    public static int getType(TypedArray array, int index){
        // this consider the problem of sdk version
        // Build.BERSION.SDK_INT: The user-visible SDK version of the framework
        // Build.VERSION_CODES.LOLLIPOP: a static final int, The javac-generated bytecode will inline the int value when you reference Build.VERSION_CODES.LOLLIPOP, rather than doing the lookup for that value at runtime.
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
            return array.getType(index);
        else{
            TypedValue value = array.peekValue(index);
            return value == null ? TypedValue.TYPE_NULL : value.type;
        }
    }

    private static int getColor(Context context, int id, int defaultValue){
        if(value == null)
            value = new TypedValue();

        try{
            Resources.Theme theme = context.getTheme();
            if(theme != null && theme.resolveAttribute(id, value, true)){
                if (value.type >= TypedValue.TYPE_FIRST_INT && value.type <= TypedValue.TYPE_LAST_INT)
                    return value.data;
                else if (value.type == TypedValue.TYPE_STRING)
                    return context.getResources().getColor(value.resourceId);
            }
        }
        catch(Exception ex){}

        return defaultValue;
    }

    // TargetApi is a annotation,
    // judge whether SDK > Build.VERSION_CODES.LOLLIPOP, to execute the follow code.
    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public static int colorControlHighlight(Context context, int defaultValue){
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
            return getColor(context, android.R.attr.colorControlHighlight, defaultValue);

        return getColor(context, R.attr.colorControlHighlight, defaultValue);
    }

}
